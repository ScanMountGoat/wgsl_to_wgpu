use std::fmt::Write;

use wgsl_to_wgpu::{MatrixVectorTypes, WriteOptions, create_shader_module};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    for name in ["shader", "compute_shader"] {
        println!("cargo:rerun-if-changed=src/{name}.wgsl");
        let wgsl_file = format!("src/{name}.wgsl");
        let wgsl_source = std::fs::read_to_string(&wgsl_file)?;

        // Generate the Rust bindings and write to a file.
        let mut text = String::new();
        writeln!(&mut text, "// File automatically generated by build.rs.")?;
        writeln!(&mut text, "// Changes made to this file will not be saved.")?;

        text += &create_shader_module(
            &wgsl_source,
            &format!("{name}.wgsl"),
            WriteOptions {
                derive_bytemuck_vertex: true,
                derive_encase_host_shareable: true,
                matrix_vector_types: MatrixVectorTypes::Glam,
                rustfmt: true,
                validate: Some(Default::default()),
                ..Default::default()
            },
        )
        .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, &wgsl_file))
        .map_err(|_| "Failed to validate shader")?;

        std::fs::write(format!("src/{name}.rs"), text.as_bytes())?;
    }

    Ok(())
}
